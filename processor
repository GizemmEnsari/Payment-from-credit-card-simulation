from datetime import datetime

class PaymentProcessor:
    def __init__(self,API_key:str) -> None:
        self.API_key = API_key

    def charge(self,card: str, month:int, year: int, amount: int) -> None:
        if not self.validate_card(card,month,year):
            raise ValueError("invalid card!")
        print(f"charging card number {card} for ${amount/100:.2f}")

    def validate_card(self,card:str,month:int,year:int)-> bool:
        return self.luhn_checksum(card) and datetime(year,month,1) > datetime.now()

    def luhn_checksum(self,card_number:str) -> bool:
        def digits_of(card_nr:str):
            return [int(d) for d in card_nr]

        digits = digits_of(card_number)
        odd_digits = digits[-1::-2] #lst of odd places in the card number
        even_digits = digits[-2::-2 ]# this method is used to check if the card number is valid
        checksum = 0
        checksum += sum(odd_digits)
        for digit in even_digits:
            checksum += sum(digits_of(str(digit * 2)))
        return checksum % 10 == 0














